{"version":3,"file":"recoil-machine.cjs.production.min.js","sources":["../src/machineAtom.ts","../src/useRecoilMachine.ts"],"sourcesContent":["import { atom } from 'recoil';\nimport {\n  assign,\n  createMachine,\n  EventObject,\n  interpret,\n  MachineConfig,\n  MachineOptions,\n  Typestate,\n} from 'xstate';\nimport { Model } from 'xstate/lib/model.types';\nimport { nanoid } from 'nanoid';\nimport { reset } from './constants';\n\nfunction isFunction(value:any) : value is Function{\n  return (\n    value &&\n    {}.toString.call(value) === '[object Function]'\n  );\n}\n\ntype MachineAtomProps<TContext, TEvent extends EventObject> = {\n  config: TContext extends Model<any, any, any>\n    ? never\n    : MachineConfig<TContext, any, TEvent>;\n  options?: Partial<MachineOptions<TContext, TEvent>>;\n  key: string;\n};\n\nexport function machineAtom<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>({\n  config: conf,\n  options,\n  key,\n}: MachineAtomProps<TContext, TEvent>) {\n  const id = nanoid();\n\n  const config = {\n    ...conf,\n    id,\n    on: {\n      ...conf.on,\n      [reset]: {\n        target: `##${id}`,\n        actions: assign(() => {\n          const ctx = conf.context;\n          if (isFunction(ctx)) return ctx();\n          return ctx;\n        }),\n      },\n    },\n  };\n  const out = atom({\n    key,\n    default: interpret(\n      createMachine<TContext, TEvent, TTypestate>(\n        config,\n        options\n      )\n    ).start(),\n  });\n\n  return out;\n}\n","import { useActor } from '@xstate/react/lib/useActor';\nimport { RecoilState, useRecoilValue } from 'recoil';\nimport {\n  EventObject,\n  Interpreter,\n  StateSchema,\n  Typestate,\n} from 'xstate';\n\nexport function useRecoilMachine<\n  TContext,\n  TStateSchema extends StateSchema,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  atom: RecoilState<\n    Interpreter<TContext, TStateSchema, TEvent, TTypestate>\n  >\n) {\n  const [state, send] = useActor(useRecoilValue(atom));\n\n  return { state, send } as const;\n}\n"],"names":["conf","config","options","key","id","nanoid","on","target","actions","assign","value","ctx","context","toString","call","atom","interpret","createMachine","start","useActor","useRecoilValue","state","send"],"mappings":"iaAqCUA,IAARC,OACAC,IAAAA,QACAC,IAAAA,IAEMC,EAAKC,WAELJ,OACDD,GACHI,GAAAA,EACAE,QACKN,EAAKM,WADR,UAES,CACPC,YAAaH,EACbI,QAASC,UAAO,eApCJC,EAqCJC,EAAMX,EAAKY,eArCPF,EAsCKC,IAnCO,sBAA5B,GAAGE,SAASC,KAAKJ,GAmCiBC,IACrBA,mBAKHI,OAAK,CACfZ,IAAAA,UACSa,YACPC,gBACEhB,EACAC,IAEFgB,6CC/CJH,SAIsBI,WAASC,iBAAeL,UAEvC,CAAEM,WAAOC"}
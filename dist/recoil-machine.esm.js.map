{"version":3,"file":"recoil-machine.esm.js","sources":["../src/constants.ts","../src/machineAtom.ts","../src/useRecoilMachine.ts"],"sourcesContent":["export const reset = '__$$RESET' as const;\n","import { atom } from 'recoil';\nimport {\n  assign,\n  createMachine,\n  EventObject,\n  interpret,\n  MachineConfig,\n  MachineOptions,\n  Typestate,\n} from 'xstate';\nimport { Model } from 'xstate/lib/model.types';\nimport { nanoid } from 'nanoid';\nimport { reset } from './constants';\n\nfunction isFunction(value:any) : value is Function{\n  return (\n    value &&\n    {}.toString.call(value) === '[object Function]'\n  );\n}\n\ntype MachineAtomProps<TContext, TEvent extends EventObject> = {\n  config: TContext extends Model<any, any, any>\n    ? never\n    : MachineConfig<TContext, any, TEvent>;\n  options?: Partial<MachineOptions<TContext, TEvent>>;\n  key: string;\n};\n\nexport function machineAtom<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>({\n  config: conf,\n  options,\n  key,\n}: MachineAtomProps<TContext, TEvent>) {\n  const id = nanoid();\n\n  const config = {\n    ...conf,\n    id,\n    on: {\n      ...conf.on,\n      [reset]: {\n        target: `##${id}`,\n        actions: assign(() => {\n          const ctx = conf.context;\n          if (isFunction(ctx)) return ctx();\n          return ctx;\n        }),\n      },\n    },\n  };\n  const out = atom({\n    key,\n    default: interpret(\n      createMachine<TContext, TEvent, TTypestate>(\n        config,\n        options\n      )\n    ).start(),\n  });\n\n  return out;\n}\n","import { useActor } from '@xstate/react/lib/useActor';\nimport { RecoilState, useRecoilValue } from 'recoil';\nimport {\n  EventObject,\n  Interpreter,\n  StateSchema,\n  Typestate,\n} from 'xstate';\n\nexport function useRecoilMachine<\n  TContext,\n  TStateSchema extends StateSchema,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = {\n    value: any;\n    context: TContext;\n  }\n>(\n  atom: RecoilState<\n    Interpreter<TContext, TStateSchema, TEvent, TTypestate>\n  >\n) {\n  const [state, send] = useActor(useRecoilValue(atom));\n\n  return { state, send } as const;\n}\n"],"names":["reset","isFunction","value","toString","call","machineAtom","conf","config","options","key","id","nanoid","on","target","actions","assign","ctx","context","out","atom","interpret","createMachine","start","useRecoilMachine","useActor","useRecoilValue","state","send"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,KAAK,GAAG,WAAd;;ACcP,SAASC,UAAT,CAAoBC,KAApB;AACE,SACEA,KAAK,IACL,GAAGC,QAAH,CAAYC,IAAZ,CAAiBF,KAAjB,MAA4B,mBAF9B;AAID;;AAUD,SAAgBG;;;MAQNC,YAARC;MACAC,eAAAA;MACAC,WAAAA;AAEA,MAAMC,EAAE,GAAGC,MAAM,EAAjB;;AAEA,MAAMJ,MAAM,gBACPD,IADO;AAEVI,IAAAA,EAAE,EAAFA,EAFU;AAGVE,IAAAA,EAAE,eACGN,IAAI,CAACM,EADR,6BAECZ,KAFD,IAES;AACPa,MAAAA,MAAM,SAAOH,EADN;AAEPI,MAAAA,OAAO,EAAEC,MAAM,CAAC;AACd,YAAMC,GAAG,GAAGV,IAAI,CAACW,OAAjB;AACA,YAAIhB,UAAU,CAACe,GAAD,CAAd,EAAqB,OAAOA,GAAG,EAAV;AACrB,eAAOA,GAAP;AACD,OAJc;AAFR,KAFT;AAHQ,IAAZ;;AAeA,MAAME,GAAG,GAAGC,IAAI,CAAC;AACfV,IAAAA,GAAG,EAAHA,GADe;AAEf,eAASW,SAAS,CAChBC,aAAa,CACXd,MADW,EAEXC,OAFW,CADG,CAAT,CAKPc,KALO;AAFM,GAAD,CAAhB;AAUA,SAAOJ,GAAP;AACD;;SC5DeK,iBASdJ;AAIA,kBAAsBK,QAAQ,CAACC,cAAc,CAACN,IAAD,CAAf,CAA9B;AAAA,MAAOO,KAAP;AAAA,MAAcC,IAAd;;AAEA,SAAO;AAAED,IAAAA,KAAK,EAALA,KAAF;AAASC,IAAAA,IAAI,EAAJA;AAAT,GAAP;AACD;;;;"}